namespace Blake.BuildTools.Generator;

public static class SampleContentBuilder
{
    public static async Task InitSampleContent(string projectFilePath)
    {
        var pagesFolder = Path.Combine(Path.GetDirectoryName(projectFilePath) ?? string.Empty, "Pages");
        if (!Directory.Exists(pagesFolder))
        {
            Directory.CreateDirectory(pagesFolder);
        }

        var samplePagePath = Path.Combine(pagesFolder, "SamplePage.md");

        if (!File.Exists(samplePagePath))
        {
            await File.WriteAllTextAsync(samplePagePath, SamplePageContent);
            Console.WriteLine($"✅ Sample page created at: {samplePagePath}");
        }
        else
        {
            Console.WriteLine($"⚠️  Sample page already exists at: {samplePagePath}");
        }

        // Add sample template
        var templatePath = Path.Combine(pagesFolder, "template.razor");
        if (!File.Exists(templatePath))
        {
            await File.WriteAllTextAsync(templatePath, SampleTemplate);
            Console.WriteLine($"✅ Sample template created at: {templatePath}");
        }
        else
        {
            Console.WriteLine($"⚠️  Sample template already exists at: {templatePath}");
        }

        // Add sample component
        var componentsFolder = Path.Combine(Path.GetDirectoryName(projectFilePath) ?? string.Empty, "Components");
        if (!Directory.Exists(componentsFolder))
        {
            Directory.CreateDirectory(componentsFolder);
        }

        var sampleComponentPath = Path.Combine(componentsFolder, "MyContainer.razor");

        if (!File.Exists(sampleComponentPath))
        {
            await File.WriteAllTextAsync(sampleComponentPath, SampleComponent);
            Console.WriteLine($"✅ Sample component created at: {sampleComponentPath}");
        }
        else
        {
            Console.WriteLine($"⚠️  Sample component already exists at: {sampleComponentPath}");
        }

        // update the nav menu
        var navMenuPath = Path.Combine(Path.GetDirectoryName(projectFilePath) ?? string.Empty, "Layout", "NavMenu.razor");

        if (File.Exists(navMenuPath))
        {
            var navMenuContent = await File.ReadAllTextAsync(navMenuPath);
            if (navMenuContent.Contains("</nav>"))
            {
                // Insert the new menu item before the closing </nav> tag
                const string newMenuItem = """
                                                   @foreach (var content in GeneratedContentIndex.GetPages())
                                                   {
                                                       <div class="nav-item px-3">
                                                           <NavLink class="nav-link" href="@(content.Slug)">
                                                               <span class="@(content.IconIdentifier)" aria-hidden="true"></span> @content.Title
                                                           </NavLink>
                                                       </div>
                                                   }
                                           """;

                var insertIndex = navMenuContent.LastIndexOf("</nav>", StringComparison.Ordinal);

                if (insertIndex != -1)
                {
                    navMenuContent = navMenuContent.Insert(insertIndex, $"{Environment.NewLine}{newMenuItem}{Environment.NewLine}");
                    await File.WriteAllTextAsync(navMenuPath, navMenuContent);
                    Console.WriteLine($"✅ Updated NavMenu.razor with dynamic content links.");
                }
                else
                {
                    Console.WriteLine("⚠️  Could not find </nav> tag in NavMenu.razor to insert dynamic content links.");
                }
            }
        }
    }

    private const string SamplePageContent = """
                                             ---
                                             title: 'My first test page'
                                             date: 2025-07-16
                                             image: images/blake-logo.png
                                             tags: ["non-technical", "personal", "career", "community"]
                                             description: "Get to know the fundamentals of Blake, the static site generator."
                                             iconIdentifier: "bi bi-plus-square-fill-nav-menu"
                                             ---

                                             ## Hello world!

                                             Hello. This is a test page, generated by the Blake Blazor static site generator. Like it?

                                             :::tip
                                             Blake supports markdown containers, like this tip. It comes with some built-in Bootstrap styles (compatible with the default Blazor template):
                                             
                                             * Exercise
                                             * Warning
                                             * Tip
                                             * Info

                                             Use it like this:
                                                ```markdown
                                                :::tip
                                                This is a tip container.
                                                :::
                                                ```

                                             You can disable these if you don't want to use them.
                                             :::

                                             :::myContainer
                                             You can also wrap anything in a Razor component, like this custom container. By specifying a container name (note it must be in camelCase), you can create custom containers.
                                                 ```markdown
                                                 :::myContainer
                                                 This is a custom container.
                                                 :::
                                                 ```
                                             Blake will render this as:

                                                ```razor
                                                <MyContainer>
                                                    This is a custom container.
                                                </MyContainer>
                                                ```

                                             The rest is up to Blazor - just make sure you have a component named `MyContainer` in your project, with a `RenderFragment` parameter for the content.
                                             You can see the example `MyContainer` component that was generated by Blake in the `Components` folder of this project.
                                             :::

                                             ## FAQ

                                             1. Why?

                                             I...honestly can't remember!

                                             2. What's next?

                                             Templating system...other features...I forget. I have a roadmap though.

                                             3. How do I use it?

                                             Eventually it will be a standalone CLI tool, you'll be able to use it like this:

                                             ```bash
                                             blake init
                                             blake bake
                                             dotnet run
                                             ```

                                             or

                                             ```bash
                                             blake init
                                             blake serve
                                             ```

                                             ## Roadmap

                                             ```bash
                                             blake new --template my-template
                                             blake new -t a-different-template
                                             ```

                                             """;
    private const string SampleTemplate = """
                                                <PageTitle>@Title</PageTitle>
                                                
                                                <p>
                                                    Published on: @Published
                                                </p>
                                                
                                                <p>
                                                    @Description
                                                </p>
                                                
                                                @Body
                                                
                                                @code {
                                                
                                                }
                                                """;

    private const string SampleComponent = """
                                                @* This is a custom container used in :::myContainer blocks.
                                                   It gets rendered automatically by Blake as <MyContainer>...</MyContainer>.
                                                   You can style or structure it however you want. *@

                                                <!-- Components/MyContainer.razor -->
                                                <div class="border border-primary rounded p-3 my-4 bg-light-subtle">
                                                    @ChildContent
                                                </div>

                                                @code {
                                                    [Parameter]
                                                    public RenderFragment? ChildContent { get; set; }
                                                }
                                                
                                                """;
}
